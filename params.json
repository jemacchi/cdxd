{
  "name": "Cdxd",
  "tagline": "Code Driven x Documentation - JSDoc Template & Plugin",
  "body": "cdxd\r\n====\r\n\r\nA JSDoc Template &amp; Plugin to implement \"Code Driven <X> Documentation\" concepts (review it [here] (http://josemacchi.wordpress.com) ). Sorry, spanish for now !\r\n\r\nThese plugin & template depends on:\r\n* [JSDoc](https://github.com/jsdoc3/jsdoc) - Documentation base tool\r\n* [js-sequence-diagrams] (http://bramp.github.io/js-sequence-diagrams/) - For sequence diagrams implementation\r\n* [jointJS] (http://jointjs.com/) - For class diagrams implementation\r\n* [jointJS UML plugin](http://jointjs.com/downloads/joint.shapes.uml.js) - For class diagrams implementation\r\n* [jointJS DirectGraph plugin] (http://jointjs.com/downloads/joint.layout.DirectedGraph.js) - For autolayout implementation\r\n\r\nFor now plugin&template are just a PoC that works and fullfil expectations. Soon we hope to completa our current roadmap (check bellow)\r\n\r\n## About\r\n\r\nThese tools implements the concepts/ideas related to CDxD. Basically, CDxD was developed following ideas like TDD.\r\n\r\nIt implies something as simple as deliver documentation based on the code, specifically documented when coding stage and by coders/programmers.\r\n \r\nAll of us, as it professional knows that documentation is a task that usually it's avoided, since it's far away from real code implementation, so the idea is to keep documentation (at all stages) as closer to code as possible.\r\n\r\nCDxD concept is about communicating what it's related to a project, as close to code as possible, using diagrams/texts/charts/etc. \r\n\r\nCDxD means Code Driven <x> Documentation, where <x> could be software design, architectural, test cases, user stories or anything that it's part of the project and requires to be properly registered/versioned/tracked/communicated/shared between members of the project.\r\n\r\nCDxD implementation is based on JSDoc since it's the best structured/designed, flexible and powerful JS documentation tool (maybe it has not a nice look & feel, but you can find a pretty good comparation [here] (http://blog.fusioncharts.com/2013/12/jsdoc-vs-yuidoc-vs-doxx-vs-docco-choosing-a-javascript-documentation-generator/ ) )\r\n\r\nTools included on this repo are :\r\n* A plugin that allows to add specific doclets ( @elements :P ) to your javadoc-like documentation on code,\r\n* A template that allows to use those specific doclets to generate documentation (like charts/diagrams/other stuff)\r\n\r\n## Demo\r\n\r\nThis is a demo of template & plugin use, to get defined a simple sequence and class charts (based on doclets)\r\n\r\n* [Sequence Chart Demo] (http://cdxd.site90.com/sequence-SequenceDiagram1.html)\r\n* [Class Chart Demo] (http://cdxd.site90.com/class-ClassDiagram1.html)\r\n\r\n## Installation\r\n\r\nSteps:\r\n\r\n1. Install JSDoc3 \r\n2. Include plugin/cdxd.js file inside JSDoc plugins folder\r\n3. Add cdxd template folder inside of JSDoc templates folder\r\n4. Edit your JSDoc conf.json file and enable the cdxd plugin and the template,   \r\n\r\n```javascript\r\n    ...\r\n    \"plugins\": [\"plugins/cdxd\"],\r\n    \"templates\": {\r\n        \"cleverLinks\": false,\r\n        \"monospaceLinks\": false,\r\n        \"cdxd\": {\r\n            \"outputSourceFiles\": true\r\n        }\r\n    },\r\n\t\"opts\": {\r\n\t\t\"template\": \"templates/cdxd\"\r\n\t}\r\n\t...\r\n```\r\n\r\nOnce you have enabled the plugin, then you only need to call JSDoc as usual \r\n(a sample cmd-line is provided at run-test file with a reference to test folder, with a simple sequence diagram annotated)\r\n\r\n## Basic Usage\r\n\r\nCurrently Sequence & Class Diagrams are fully implemented, that means that you can use doclets like\r\n\r\n* @cdxd.seqdesc, @cdxd.call, @cdxd.callback & @cdxd.note (for sequence diagrams) or \r\n* @cdxd.classdesc, @cdxd.class, @cdxd.interface, @cdxd.abstract, @cdxd.inherits, @cdxd.composedBy, @cdxd.aggregatedWith, @cdxd.associatedWith & @cdxd.implements (for class diagrams)\r\n\r\n### Sequence Diagrams\r\n\r\nBasic usage for sequence diagrams \r\n\r\n```javascript\r\n\r\n      /**\r\n       * First call response.\r\n\t   * @cdxd.callback SequenceDiagram1 2 SampleAClass 'Message 2'\r\n\t   * @cdxd.call SequenceDiagram1 4 SampleCClass 'Message 4'\r\n\t   * @cdxd.note SequenceDiagram1 5 over 'This is a simple note'\r\n       */\r\n      firstResponse: function(fx) {\r\n        return null;\r\n      }\r\n\t  \r\n```\r\n\r\nCall's Implemented doclets:\r\n* @cdxd.call --> Call\r\n* @cdxd.callback --> Callback (dotted line)\r\n\r\nwhere sequence diagram doclets arguments are :\r\n\r\n* diagram code (ie. SequenceDiagram1)\r\n* call order number  (ie. 3)\r\n* entity/class destination  (ie. SampleBClass)\r\n* message text (required to be enclosed in quotation marks) (ie. 'Message 2')\r\n\r\nOr Notes implemented doclets:\r\n* @cdxd.note --> Add notes to defined entity \r\n* @cdxd.seqdesc --> Diagram description (it's only to work in the context of a function/method declaration)\r\n\r\nParams :\r\n* diagram code (ie. SequenceDiagram1)\r\n* call order number  (ie. 3)\r\n* note location  (right|left|over)\r\n* message text (required to be enclosed in quotation marks) (ie. 'Message 2')\r\n\r\n\r\n### Class Diagrams\r\n\r\nBasic usage for class diagrams\r\n\r\n```javascript\r\nfunction(Inheritance, ko, $) {\r\n    'use strict';\r\n    /**\r\n    * This is a basic Sample Class.\r\n\t* @class SampleAClass\r\n    * @version 1.0\r\n    * @author  Jose Macchi <jemacchi@yahoo.com.ar>\r\n    * @params Object options options:{ [ el: id/class ][, template: ] [, effects: {...}]  } -> effects: jQuery UI effects.\r\n\t* @cdxd.inherits ClassDiagram1 SampleBClass\r\n\t* @cdxd.class ClassDiagram2\r\n    * @cdxd.composedBy ClassDiagram1 CompositionSample abstract\r\n\t* @cdxd.aggregatedWith ClassDiagram1 AggregationSample\t\r\n\t* @cdxd.associatedWith ClassDiagram1 AssociationSample\t\r\n    */\r\n    var SampleAClass = Class.extend(\r\n```\r\n\r\nwhere class diagram doclets arguments are :\r\n* diagram code (ie. SequenceDiagram1)\r\n* related entity  (ie. CompositionSample)\r\n* optionally: related entity type  (ie. abstract)\r\n\r\nOn some cases, like @cdxd.class, you only can set the Diagram code (since it's declaring the type of the element)\r\n\r\nAlso you can add a diagram description with doclet:\r\n\r\n* @cdxd.classdesc --> Diagram description (it's only to work in the context of a class declaration)\r\n\r\n### Common behavior\r\n\r\nDoclets assumes the entity source as the current memberof property of the doclet (that means that uses the class definition).\r\nUsing doclet in this way, you can distribute a sequence diagram documentation throw the code as it's really invoked.\r\n\r\n## Version\r\n\r\nFollowing [Semantic Versioning Specs] (http://semver.org/)\r\n\r\nCurrent Version > 0.2.0\r\n\r\n## Roadmap/ToDo\r\n\r\n* Create new demos (complete and well documented, ie. class patterns)\r\n* Document CDxD plugin and template with same template ! \r\n* Provide a DOCLET user reference manual\r\n* Create SCRUM plugin + add SCRUM features to template\r\n\r\n## Author\r\n\r\n[Jose Macchi](https://github.com/jemacchi)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}